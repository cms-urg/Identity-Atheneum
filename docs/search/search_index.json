{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to Identity Atheneum (I.A.) Identity Atheneum (I.A.) is a highly scalable federated data storage system that can also be used as an authorization server. Supported IdPs We try our best to support as many identity providers as possible, here is a list of currently supported IdPs. Local IdP (Username/Password) SAML 2.0 Shibboleth (SAML) Contribute If you wish to contribute, please checkout our GitHub . ___ ________ |\\ \\ |\\ __ \\ \\ \\ \\ \\ \\ \\|\\ \\ \\ \\ \\ \\ \\ __ \\ \\ \\ \\ __\\ \\ \\ \\ \\ ___ \\ \\__\\\\__\\ \\__\\ \\__\\\\__\\ \\|__\\|__|\\|__|\\|__\\|__|","title":"Home"},{"location":"#home","text":"Welcome to Identity Atheneum (I.A.) Identity Atheneum (I.A.) is a highly scalable federated data storage system that can also be used as an authorization server.","title":"Home"},{"location":"#supported-idps","text":"We try our best to support as many identity providers as possible, here is a list of currently supported IdPs. Local IdP (Username/Password) SAML 2.0 Shibboleth (SAML)","title":"Supported IdPs"},{"location":"#contribute","text":"If you wish to contribute, please checkout our GitHub . ___ ________ |\\ \\ |\\ __ \\ \\ \\ \\ \\ \\ \\|\\ \\ \\ \\ \\ \\ \\ __ \\ \\ \\ \\ __\\ \\ \\ \\ \\ ___ \\ \\__\\\\__\\ \\__\\ \\__\\\\__\\ \\|__\\|__|\\|__|\\|__\\|__|","title":"Contribute"},{"location":"configuration/","text":"Configuration identity_providers A list of IdPs to use. local To define a local IdP, use the following template identity_providers: - type: local name: local_provider display_name: Local Identity Provider type: Should be local name: Unique name for the IdP display_name: Human-readable name for the IdP saml To define a SAML IdP, use the following template identity_providers: - type: saml name: testshib display_name: TestShib config: callback_url: http://localhost:3000/idps/uoft_shibboleth/login entry_point: https://idp.testshib.org/idp/profile/SAML2/Redirect/SSO identifier_format: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified issuer: my_issuer public_cert: keys/certificate.crt private_key: keys/mykey.key signature_algo: sha256 type: Should be saml name: Unique name for the IdP display_name: Human-readable name for the IdP config callback_url: This should always be <host_root>/idps/<name>/login entry_point: SAML entry point identifier_format: Format of the identifier, make sure your IdP support the format you are requesting. issuer: Issuer name, you can just use a random name public_cert: Public certificate path, this is used to sign the request private_key: Private decryption key complementary to public certificate. signature_algo: What algorithm to use when signing request, can be sha1 , sha256 or sha512 .","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#identity_providers","text":"A list of IdPs to use.","title":"identity_providers"},{"location":"configuration/#local","text":"To define a local IdP, use the following template identity_providers: - type: local name: local_provider display_name: Local Identity Provider type: Should be local name: Unique name for the IdP display_name: Human-readable name for the IdP","title":"local"},{"location":"configuration/#saml","text":"To define a SAML IdP, use the following template identity_providers: - type: saml name: testshib display_name: TestShib config: callback_url: http://localhost:3000/idps/uoft_shibboleth/login entry_point: https://idp.testshib.org/idp/profile/SAML2/Redirect/SSO identifier_format: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified issuer: my_issuer public_cert: keys/certificate.crt private_key: keys/mykey.key signature_algo: sha256 type: Should be saml name: Unique name for the IdP display_name: Human-readable name for the IdP config callback_url: This should always be <host_root>/idps/<name>/login entry_point: SAML entry point identifier_format: Format of the identifier, make sure your IdP support the format you are requesting. issuer: Issuer name, you can just use a random name public_cert: Public certificate path, this is used to sign the request private_key: Private decryption key complementary to public certificate. signature_algo: What algorithm to use when signing request, can be sha1 , sha256 or sha512 .","title":"saml"},{"location":"installation/","text":"Installation System Requirement Before we begin the installation, make sure you satisfy the system requirement. Operating System Any Linux or macOS distribution is fine, however the following are recommended, as they are thoroughly tested. Ubuntu 16.04 macOS 10.13 High Sierra Redis Redis is required for the system to function. Any version of Redis should be fine, but it is recommended to get the latest 4.0 version. Make sure Redis is not password protected, and is only visible on internal network. MongoDB MongoDB is required for the system to function. We support MongoDB 3.6.x, however 4.0 should also work. Make sure MongoDB is not password protected, and is only visible on internal network. Node.js Node.js 8.x is required. Build Awesome! You now have the system requirement satisfied, let's build the application. Install Dependencies First we need to install some dependencies, you can do it by simply running $ npm install Unit Test (Optional) You can run an unit test just to make sure everything is working. $ npm run test You should see something like the following if test passes ConfigFile #constructor() \u2713 should set file path #read() \u2713 should read the file content and return it as string YamlConfigFile #parse() \u2713 should parse the yaml content \u2713 should throw error if yaml not valid 4 passing (12ms) Compile JavaScript Before we can run the server, we need to compile the scripts to strip out all type definitions. $ npm run flow:build You should now see a new folder called /lib . Congratulations! Everything is built. Basic Configurations We now need to do some basic configurations, open config.yml , and put following content. port: # Which port you wish to listen on host_root: # Host root url, for example: https://example.com redis: - host: # Redis host - port: # Redis port mongo: url: # MongoDB connection URL, for example: mongodb://localhost:27017/ia app_secret: # Choose a random string, this is used to encrypt sessions Now try to run the server using command: $ node ./lib You will see an error saying identity_providers is undefined. This is because we haven't defined a list of IdPs to use yet, to do so, please follow Identity Provider Configurations","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#system-requirement","text":"Before we begin the installation, make sure you satisfy the system requirement.","title":"System Requirement"},{"location":"installation/#operating-system","text":"Any Linux or macOS distribution is fine, however the following are recommended, as they are thoroughly tested. Ubuntu 16.04 macOS 10.13 High Sierra","title":"Operating System"},{"location":"installation/#redis","text":"Redis is required for the system to function. Any version of Redis should be fine, but it is recommended to get the latest 4.0 version. Make sure Redis is not password protected, and is only visible on internal network.","title":"Redis"},{"location":"installation/#mongodb","text":"MongoDB is required for the system to function. We support MongoDB 3.6.x, however 4.0 should also work. Make sure MongoDB is not password protected, and is only visible on internal network.","title":"MongoDB"},{"location":"installation/#nodejs","text":"Node.js 8.x is required.","title":"Node.js"},{"location":"installation/#build","text":"Awesome! You now have the system requirement satisfied, let's build the application.","title":"Build"},{"location":"installation/#install-dependencies","text":"First we need to install some dependencies, you can do it by simply running $ npm install","title":"Install Dependencies"},{"location":"installation/#unit-test-optional","text":"You can run an unit test just to make sure everything is working. $ npm run test You should see something like the following if test passes ConfigFile #constructor() \u2713 should set file path #read() \u2713 should read the file content and return it as string YamlConfigFile #parse() \u2713 should parse the yaml content \u2713 should throw error if yaml not valid 4 passing (12ms)","title":"Unit Test (Optional)"},{"location":"installation/#compile-javascript","text":"Before we can run the server, we need to compile the scripts to strip out all type definitions. $ npm run flow:build You should now see a new folder called /lib . Congratulations! Everything is built.","title":"Compile JavaScript"},{"location":"installation/#basic-configurations","text":"We now need to do some basic configurations, open config.yml , and put following content. port: # Which port you wish to listen on host_root: # Host root url, for example: https://example.com redis: - host: # Redis host - port: # Redis port mongo: url: # MongoDB connection URL, for example: mongodb://localhost:27017/ia app_secret: # Choose a random string, this is used to encrypt sessions Now try to run the server using command: $ node ./lib You will see an error saying identity_providers is undefined. This is because we haven't defined a list of IdPs to use yet, to do so, please follow Identity Provider Configurations","title":"Basic Configurations"}]}