{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Identity Atheneum Info This documentation applies to I.A. 0.3 with container version 1. A test installation is available at https://tracademic.utsc.utoronto.ca . Simple authentcation and data storage tool for developers and administrators. Developer Node.js Quick Start Roadmap Full support with Shibboleth API endpoints to retrieve courses and tutorials API endpoints to populate authentication token API endpoint to logout API endpoint to push data to containers API endpoint to modify user meta","title":"Welcome to Identity Atheneum"},{"location":"#welcome-to-identity-atheneum","text":"Info This documentation applies to I.A. 0.3 with container version 1. A test installation is available at https://tracademic.utsc.utoronto.ca . Simple authentcation and data storage tool for developers and administrators. Developer Node.js Quick Start","title":"Welcome to Identity Atheneum"},{"location":"#roadmap","text":"Full support with Shibboleth API endpoints to retrieve courses and tutorials API endpoints to populate authentication token API endpoint to logout API endpoint to push data to containers API endpoint to modify user meta","title":"Roadmap"},{"location":"overview/","text":"Overview So... what is Identity Atheneum? Identity Atheneum is a Node.js application that serves 2 purposes: Exposes an unified OAuth API, abstract away other auth details. Allows applications to save and retrieve shared information using REST API calls. Data Managed By I.A. Warning You can still manage those information within your application, however that defeats the purpose. Please refactor your app so it only retrieves these information from I.A. Users Username, email address, ID, and any attributes associated. Courses Course name, content, tutorials, students, TAs, instructors. Tutorials Tutoral name, content, students, TAs, instructors.","title":"Overview"},{"location":"overview/#overview","text":"","title":"Overview"},{"location":"overview/#so-what-is-identity-atheneum","text":"Identity Atheneum is a Node.js application that serves 2 purposes: Exposes an unified OAuth API, abstract away other auth details. Allows applications to save and retrieve shared information using REST API calls.","title":"So... what is Identity Atheneum?"},{"location":"overview/#data-managed-by-ia","text":"Warning You can still manage those information within your application, however that defeats the purpose. Please refactor your app so it only retrieves these information from I.A. Users Username, email address, ID, and any attributes associated. Courses Course name, content, tutorials, students, TAs, instructors. Tutorials Tutoral name, content, students, TAs, instructors.","title":"Data Managed By I.A."},{"location":"developer/quick-start-node-js/","text":"Node.js Quick Start Guide Note This guide is intended for developers who are integrating their Node.js application with I.A. for the first time. Think how you can refactor your application I.A. is best used when you integrate with it properly. Think about how your application can be refactored. Read the overview page and have a general idea of how I.A. works. Register your application First you have to register your application, goto I.A. admin dashboard by visiting https://tracademic.utsc.utoronto.ca/login and login with your administrator credentials. Then choose [Applications] - [Import Registration Request], and enter a string with following format: { name : YOUR_APPLICATION_NAME , assertion_endpoint : http[s]://YOUR_ASSERTION_ENDPOINT } name - Your application name, can be anything. assertion_endpoint - The URL you with I.A. to redirect back to once user is authenticated. For the purpose of this tutorial, we assume you have it set as http://yourapp.com/login . Now you have your application registered, you should see it in the applications list. Click on [Applications Keys], and generate a new key pair. We have all information we need now, let's write a simple configuration file so we keep track of things: // config.js module . exports = { IA_ENDPOINT : https://tracademic.utsc.utoronto.ca , APPLICATION_ID : YOUR_APPLICATION_ID , SECRET_KEY : YOUR_SECRET_KEY } Integrate authentication We assume you are using passport.js and have axios installed. It is not necessary to have these libs, but they make our life easier. Write a service provider It is a good practice to write a provider for API calls, we will write a simple provider that can get login endpoint, and populate authentication token to a real user. First write the basic class structure: // IAServiceProvider.js const config = require ( ./config ); const axios = require ( axios ); class IAServiceProvider { } The first function we are going to write will return the login URL. // IAServiceProvider.js class IAServiceProvider { // ... static getLoginUrl () { return ` ${ config . IA_ENDPOINT } /login?id= ${ config . APPLICATION_ID } ` ; } // ... } Then we will write a function that turns token into a real user // IAServiceProvider.js class IAServiceProvider { // ... static async getUserByAuthenticationToken ( token ) { try { const result = await axios . get ( ` ${ config . IA_ENDPOINT } /api/auth_tokens/ ${ token } ` , { headers : { Authorization : config . SECRET_KEY } } ) return result . data ; } catch ( e ) { throw e ; // Just throw it back } } // ... } Create a passport authentication strategy Use the following code to define your authentication strategy const passport = require ( passport ); const IAServiceProvider = require ( ../providers/IAServiceProvider ); const CustomStrategy = require ( passport-custom ). Strategy ; // Nothing to serialize, just passthrough passport . serializeUser (( user , done ) = { done ( null , user ); }); // We get our user by the token passport . deserializeUser (( id , done ) = { IAServiceProvider . getUserByToken ( id ) . then ( user = done ( null , user )) . catch ( e = done ( e , false )); }); // Custom strategy passport . use ( ia-auth , new CustomStrategy (( req , done ) = { if ( req . query . token ) { IAServiceProvider . getUserByToken ( req . query . token ) . then (() = done ( null , req . query . token )) . catch ( e = done ( e , false )); } else { done ( null , false ); } })); module . exports = passport ; Now you have the strategy defined, you can use it easily by adding this to your router router . get ( /login , passport . authenticate ( ia-auth , { successRedirect : URL_YOU_WISH_TO_REDIRECT_TO , failureRedirect : IAServiceProvider . getLoginUrl () })); Done! You now have your application working with I.A. authentication module. Integrate storage \u256e\uff08\u256f\uff3f\u2570\uff09\u256d Under construction...","title":"Node.js Quick Start Guide"},{"location":"developer/quick-start-node-js/#nodejs-quick-start-guide","text":"Note This guide is intended for developers who are integrating their Node.js application with I.A. for the first time.","title":"Node.js Quick Start Guide"},{"location":"developer/quick-start-node-js/#think-how-you-can-refactor-your-application","text":"I.A. is best used when you integrate with it properly. Think about how your application can be refactored. Read the overview page and have a general idea of how I.A. works.","title":"Think how you can refactor your application"},{"location":"developer/quick-start-node-js/#register-your-application","text":"First you have to register your application, goto I.A. admin dashboard by visiting https://tracademic.utsc.utoronto.ca/login and login with your administrator credentials. Then choose [Applications] - [Import Registration Request], and enter a string with following format: { name : YOUR_APPLICATION_NAME , assertion_endpoint : http[s]://YOUR_ASSERTION_ENDPOINT } name - Your application name, can be anything. assertion_endpoint - The URL you with I.A. to redirect back to once user is authenticated. For the purpose of this tutorial, we assume you have it set as http://yourapp.com/login . Now you have your application registered, you should see it in the applications list. Click on [Applications Keys], and generate a new key pair. We have all information we need now, let's write a simple configuration file so we keep track of things: // config.js module . exports = { IA_ENDPOINT : https://tracademic.utsc.utoronto.ca , APPLICATION_ID : YOUR_APPLICATION_ID , SECRET_KEY : YOUR_SECRET_KEY }","title":"Register your application"},{"location":"developer/quick-start-node-js/#integrate-authentication","text":"We assume you are using passport.js and have axios installed. It is not necessary to have these libs, but they make our life easier.","title":"Integrate authentication"},{"location":"developer/quick-start-node-js/#write-a-service-provider","text":"It is a good practice to write a provider for API calls, we will write a simple provider that can get login endpoint, and populate authentication token to a real user. First write the basic class structure: // IAServiceProvider.js const config = require ( ./config ); const axios = require ( axios ); class IAServiceProvider { } The first function we are going to write will return the login URL. // IAServiceProvider.js class IAServiceProvider { // ... static getLoginUrl () { return ` ${ config . IA_ENDPOINT } /login?id= ${ config . APPLICATION_ID } ` ; } // ... } Then we will write a function that turns token into a real user // IAServiceProvider.js class IAServiceProvider { // ... static async getUserByAuthenticationToken ( token ) { try { const result = await axios . get ( ` ${ config . IA_ENDPOINT } /api/auth_tokens/ ${ token } ` , { headers : { Authorization : config . SECRET_KEY } } ) return result . data ; } catch ( e ) { throw e ; // Just throw it back } } // ... }","title":"Write a service provider"},{"location":"developer/quick-start-node-js/#create-a-passport-authentication-strategy","text":"Use the following code to define your authentication strategy const passport = require ( passport ); const IAServiceProvider = require ( ../providers/IAServiceProvider ); const CustomStrategy = require ( passport-custom ). Strategy ; // Nothing to serialize, just passthrough passport . serializeUser (( user , done ) = { done ( null , user ); }); // We get our user by the token passport . deserializeUser (( id , done ) = { IAServiceProvider . getUserByToken ( id ) . then ( user = done ( null , user )) . catch ( e = done ( e , false )); }); // Custom strategy passport . use ( ia-auth , new CustomStrategy (( req , done ) = { if ( req . query . token ) { IAServiceProvider . getUserByToken ( req . query . token ) . then (() = done ( null , req . query . token )) . catch ( e = done ( e , false )); } else { done ( null , false ); } })); module . exports = passport ; Now you have the strategy defined, you can use it easily by adding this to your router router . get ( /login , passport . authenticate ( ia-auth , { successRedirect : URL_YOU_WISH_TO_REDIRECT_TO , failureRedirect : IAServiceProvider . getLoginUrl () })); Done! You now have your application working with I.A. authentication module.","title":"Create a passport authentication strategy"},{"location":"developer/quick-start-node-js/#integrate-storage","text":"\u256e\uff08\u256f\uff3f\u2570\uff09\u256d Under construction...","title":"Integrate storage"}]}